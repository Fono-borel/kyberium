# ============================================================================
#  Kyberium - Post-Quantum Cryptography Library
#  Copyright (C) 2025 RhaB17369
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ============================================================================

import sys
import subprocess
import importlib.util
import os
from typing import Optional

def check_python_version() -> bool:
    """V√©rifie que la version de Python est compatible (3.7+)"""
    if sys.version_info < (3, 7):
        print("‚ùå Kyberium n√©cessite Python 3.7 ou sup√©rieur")
        return False
    return True

def check_and_install_dependency(module_name: str, pip_name: Optional[str] = None) -> bool:
    """
    V√©rifie si un module est disponible, sinon tente de l'installer
    
    Args:
        module_name: Nom du module Python √† importer
        pip_name: Nom du package pip (si diff√©rent du module_name)
    
    Returns:
        True si le module est disponible, False sinon
    """
    if pip_name is None:
        pip_name = module_name
    
    # V√©rifier si le module est d√©j√† disponible
    spec = importlib.util.find_spec(module_name)
    if spec is not None:
        return True
    
    print(f"üì¶ Module '{module_name}' non trouv√©. Tentative d'installation...")
    
    try:
        # V√©rifier que pip est disponible
        subprocess.run([sys.executable, "-m", "pip", "--version"], 
                      check=True, capture_output=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print(f"‚ùå pip n'est pas disponible. Impossible d'installer {module_name}")
        return False
    
    try:
        # Installer le module
        print(f"üîß Installation de {pip_name}...")
        result = subprocess.run(
            [sys.executable, "-m", "pip", "install", pip_name],
            capture_output=True,
            text=True,
            check=True
        )
        print(f"‚úÖ {pip_name} install√© avec succ√®s")
        
        # V√©rifier que l'installation a fonctionn√©
        spec = importlib.util.find_spec(module_name)
        if spec is not None:
            return True
        else:
            print(f"‚ùå Installation de {module_name} √©chou√©e")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation de {pip_name}: {e}")
        print(f"Sortie d'erreur: {e.stderr}")
        return False

def ensure_dependencies() -> bool:
    """
    V√©rifie et installe automatiquement toutes les d√©pendances requises
    
    Returns:
        True si toutes les d√©pendances sont disponibles, False sinon
    """
    print("üîç V√©rification des d√©pendances Kyberium...")
    
    # V√©rifier la version de Python
    if not check_python_version():
        return False
    
    # Liste des d√©pendances requises
    dependencies = [
        ("pqcrypto", "pqcrypto"),
        ("cryptography", "cryptography"),
    ]
    
    # V√©rifier et installer chaque d√©pendance
    for module_name, pip_name in dependencies:
        if not check_and_install_dependency(module_name, pip_name):
            print(f"‚ùå Impossible de r√©soudre la d√©pendance: {module_name}")
            return False
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    return True

def safe_import(module_name: str, fallback_message: Optional[str] = None) -> Optional[object]:
    """
    Importe un module de mani√®re s√©curis√©e avec gestion d'erreur
    
    Args:
        module_name: Nom du module √† importer
        fallback_message: Message √† afficher en cas d'√©chec
    
    Returns:
        Le module import√© ou None en cas d'√©chec
    """
    try:
        return __import__(module_name)
    except ImportError as e:
        if fallback_message:
            print(f"‚ö†Ô∏è  {fallback_message}: {e}")
        else:
            print(f"‚ö†Ô∏è  Impossible d'importer {module_name}: {e}")
        return None

# V√©rifier les d√©pendances au d√©marrage
if not ensure_dependencies():
    print("‚ùå Kyberium ne peut pas d√©marrer - d√©pendances manquantes")
    print("üí° Essayez d'installer manuellement: pip install pqcrypto cryptography")
    sys.exit(1)

# Version de Kyberium
__version__ = "1.0.0"

# Informations sur le projet
__author__ = "Kyberium Team"
__description__ = "Librairie de chiffrement post-quantique modulaire"

print(f"üöÄ Kyberium {__version__} initialis√© avec succ√®s")
