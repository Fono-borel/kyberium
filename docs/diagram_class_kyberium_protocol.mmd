classDiagram
    %% ============================================================================
    %% INTERFACES CRYPTOGRAPHIQUES (ABSTRACT)
    %% ============================================================================

    class KEMInterface {
        <<interface>>
        +generate_keypair() tuple[bytes, bytes]
        +encapsulate(public_key: bytes) tuple[bytes, bytes]
        +decapsulate(ciphertext: bytes, private_key: bytes) bytes
    }

    class SignatureInterface {
        <<interface>>
        +generate_keypair() tuple[bytes, bytes]
        +sign(message: bytes, private_key: bytes) bytes
        +verify(message: bytes, signature: bytes, public_key: bytes) bool
    }

    class SymmetricCipherInterface {
        <<interface>>
        +encrypt(plaintext: bytes, key: bytes, nonce: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, key: bytes, nonce: bytes) bytes
    }

    class KDFInterface {
        <<interface>>
        +derive_key(input_key_material: bytes, length: int) bytes
    }

    class DoubleRatchetInterface {
        <<interface>>
        +initialize(shared_secret: bytes) void
        +ratchet_encrypt(plaintext: bytes) dict
        +ratchet_decrypt(ciphertext: bytes, metadata: dict) bytes
    }

    %% ============================================================================
    %% IMPLÉMENTATIONS CRYPTOGRAPHIQUES
    %% ============================================================================

    class Kyber1024 {
        +generate_keypair() tuple[bytes, bytes]
        +encapsulate(public_key: bytes) tuple[bytes, bytes]
        +decapsulate(ciphertext: bytes, private_key: bytes) bytes
    }

    class DilithiumSignature {
        +generate_keypair() tuple[bytes, bytes]
        +sign(message: bytes, private_key: bytes) bytes
        +verify(message: bytes, signature: bytes, public_key: bytes) bool
    }

    class AESGCMCipher {
        +encrypt(plaintext: bytes, key: bytes, nonce: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, key: bytes, nonce: bytes) bytes
    }

    class ChaCha20Cipher {
        +encrypt(plaintext: bytes, key: bytes, nonce: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, key: bytes, nonce: bytes) bytes
    }

    class SHA3KDF {
        +derive_key(input_key_material: bytes, length: int) bytes
    }

    class SHAKE256KDF {
        +derive_key(input_key_material: bytes, length: int) bytes
    }

    %% ============================================================================
    %% GESTIONNAIRE ET RATCHET
    %% ============================================================================

    class SessionManager {
        <<Abstract>>
        -session_id: str
        -shared_secret: bytes
        -handshake_done: bool
        +init_session(peer_public_key: bytes, kdf_type: str, symmetric_type: str) bytes
        +complete_handshake(ciphertext: bytes) bool
        +encrypt(plaintext: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, nonce: bytes) bytes
        +sign(message: bytes) bytes
        +verify(message: bytes, signature: bytes) bool
    }

    class TripleRatchet {
        -root_key: bytes
        -send_chain_key: bytes
        -recv_chain_key: bytes
        +init_ratchet(peer_kem_public: bytes, peer_sign_public: bytes) bytes
        +ratchet_encrypt(plaintext: bytes) dict
        +ratchet_decrypt(ciphertext: bytes, nonce: bytes, signature: bytes) bytes
    }

    %% ============================================================================
    %% API PUBLIQUE
    %% ============================================================================

    class KyberiumAPI {
        +init_session(peer_public_key: bytes, kdf_type: str, symmetric_type: str) bytes
        +complete_handshake(ciphertext: bytes) bool
        +encrypt(plaintext: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, nonce: bytes) bytes
        +sign(message: bytes) bytes
        +verify(message: bytes, signature: bytes) bool
        +init_triple_ratchet(peer_kem_public: bytes, peer_sign_public: bytes) bytes
        +triple_encrypt(plaintext: bytes) dict
        +triple_decrypt(ciphertext: bytes, nonce: bytes, signature: bytes) bytes
    }

    %% ============================================================================
    %% BINDINGS NATIFS
    %% ============================================================================

    class KyberiumCPP {
        +init_session(peer_public_key: bytes, kdf_type: str, symmetric_type: str) bytes
        +complete_handshake(ciphertext: bytes) bool
        +encrypt(plaintext: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, nonce: bytes) bytes
        +sign(message: bytes) bytes
        +verify(message: bytes, signature: bytes) bool
        +init_triple_ratchet(peer_kem_public: bytes, peer_sign_public: bytes) bytes
        +triple_encrypt(plaintext: bytes) dict
        +triple_decrypt(ciphertext: bytes, nonce: bytes, signature: bytes) bytes
    }

    class KyberiumJNI {
        +initSession(peerPublicKey: bytes) bytes
        +completeHandshake(ciphertext: bytes) bool
        +encrypt(plaintext: bytes) tuple[bytes, bytes]
        +decrypt(ciphertext: bytes, nonce: bytes) bytes
        +sign(message: bytes) bytes
        +verify(message: bytes, signature: bytes) bool
        +initTripleRatchet(peerKemPublic: bytes, peerSignPublic: bytes) bytes
        +tripleEncrypt(plaintext: bytes) dict
        +tripleDecrypt(ciphertext: bytes, nonce: bytes, signature: bytes) bytes
    }

    class KyberiumPHP {
        +initSession(peerPublicKey: string) string
        +completeHandshake(ciphertext: string) bool
        +encrypt(plaintext: string) array
        +decrypt(ciphertext: string, nonce: string) string
        +sign(message: string) string
        +verify(message: string, signature: string) bool
        +initTripleRatchet(peerKemPublic: string, peerSignPublic: string) string
        +tripleEncrypt(plaintext: string) array
        +tripleDecrypt(ciphertext: string, nonce: string, signature: string) string
    }

    %% ============================================================================
    %% UTILITAIRES ET EXCEPTIONS
    %% ============================================================================

    class KyberiumException {
        +__init__(message: str) void
        +get_error_code() int
    }

    class SecurityException {
        +__init__(message: str) void
        +get_security_level() str
    }

    class PerformanceMonitor {
        +record_encryption(duration: float) void
        +record_decryption(duration: float) void
        +get_statistics() dict
    }

    %% ============================================================================
    %% ÉNUMÉRATIONS
    %% ============================================================================

    class KDFType {
        <<enumeration>>
        SHA3
        SHAKE256
    }

    class SymmetricType {
        <<enumeration>>
        AESGCM
        ChaCha20
    }

    %% ============================================================================
    %% RELATIONS D'HÉRITAGE
    %% ============================================================================

    KEMInterface <|.. Kyber1024 : Inheritance
    SignatureInterface <|.. DilithiumSignature : Inheritance
    SymmetricCipherInterface <|.. AESGCMCipher : Inheritance
    SymmetricCipherInterface <|.. ChaCha20Cipher : Inheritance
    KDFInterface <|.. SHA3KDF : Inheritance
    KDFInterface <|.. SHAKE256KDF : Inheritance
    DoubleRatchetInterface <|.. TripleRatchet : Inheritance

    %% ============================================================================
    %% RELATIONS DE COMPOSITION
    %% ============================================================================

    SessionManager *-- KEMInterface : uses
    SessionManager *-- KDFInterface : uses
    SessionManager *-- SignatureInterface : uses
    SessionManager *-- SymmetricCipherInterface : uses
    SessionManager *-- TripleRatchet : uses
    TripleRatchet *-- KEMInterface : uses
    TripleRatchet *-- KDFInterface : uses
    TripleRatchet *-- SignatureInterface : uses
    TripleRatchet *-- SymmetricCipherInterface : uses
    KyberiumAPI *-- SessionManager : manages
    KyberiumAPI *-- TripleRatchet : manages
    KyberiumCPP *-- KyberiumAPI : wraps
    KyberiumJNI *-- KyberiumAPI : wraps
    KyberiumPHP *-- KyberiumAPI : wraps

    %% ============================================================================
    %% RELATIONS D'ASSOCIATION
    %% ============================================================================

    SessionManager --> PerformanceMonitor : monitors
    TripleRatchet --> PerformanceMonitor : monitors
    KyberiumAPI --> PerformanceMonitor : monitors
    SessionManager "1" --> KDFType : has
    SessionManager "1" --> SymmetricType : has

    %% ============================================================================
    %% STYLES
    %% ============================================================================

    style KEMInterface fill:#bfb,stroke:#6f6,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style SignatureInterface fill:#bfb,stroke:#6f6,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style SymmetricCipherInterface fill:#bfb,stroke:#6f6,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style KDFInterface fill:#bfb,stroke:#6f6,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style DoubleRatchetInterface fill:#bfb,stroke:#6f6,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style SessionManager fill:#bfb,stroke:#6f6,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style KDFType fill:#ffb,stroke:#663,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style SymmetricType fill:#ffb,stroke:#663,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style KyberiumException fill:#ffb,stroke:#663,stroke-width:2px,color:#000,stroke-dasharray: 5 5
    style SecurityException fill:#ffb,stroke:#663,stroke-width:2px,color:#000,stroke-dasharray: 5 5